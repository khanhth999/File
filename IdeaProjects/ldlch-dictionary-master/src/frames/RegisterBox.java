package frames;

import database.User;
import javax.swing.*;
import java.awt.CardLayout;
import java.awt.event.*;

/**
 *
 * @author dinht_000
 */
public class RegisterBox extends JFrame {
    private User user;

    public RegisterBox(User usr) {
        super("Register");
        this.user = usr;

        initComponents();
        //this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setVisible(true);
        setResizable(false);

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {

                synchronized (RegisterBox.this) {
                    // set invisible
                    //ModifyDictionaryFrame.this.setVisible(false);
                    RegisterBox.this.dispose();
                    RegisterBox.this.notify();
                }
            }
        });

        // check valid user at first
        // (the user registered and comes back the register box)
        if (user.isValidUser()) {
            RegNotiLabel.setText("<html>Name:" + user.getName() + "<br>Product Key:" + user.getProductKey() + "</html>");
            downCards.show(downParentPanel, "regDoneCard");
            upCards.show(upParentPanel, "confirmCard");
            headCards.show(headParentPanel, "regDoneNotiCard");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        mainPanel = new JPanel();
        headParentPanel = new JPanel();
        unregNotiPanel = new JPanel();
        unregNotiLabel = new JLabel();
        regDoneNotiPanel = new JPanel();
        regDoneNotiLabel = new JLabel();
        upParentPanel = new JPanel();
        warningPanel = new JPanel();
        warningIcon = new ImageIcon("./img/warning.png");
        warningIconLabel = new JLabel("", warningIcon, JLabel.CENTER);
        warningMesLabel = new JLabel();
        confirmPanel = new JPanel();
        confirmIcon = new ImageIcon("./img/confirm.png");
        confirmIconLabel = new JLabel("", confirmIcon, JLabel.CENTER);
        confirmMesLabel = new JLabel();
        centerPanel = new JPanel();
        getKeyButton = new JButton();
        showRegButton = new JButton();
        getKeyLabel = new JLabel();
        enterKeyLabel = new JLabel();
        downParentPanel = new JPanel();
        nonPanel = new JPanel();
        enterKeyPanel = new JPanel();
        final JButton regButton = new JButton();
        jScrollPane2 = new JScrollPane(inputKeyArea, JScrollPane.VERTICAL_SCROLLBAR_NEVER, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        inputKeyArea = new JTextArea();
        notiInputLabel = new JLabel();
        regDonePanel = new JPanel();
        RegNotiLabel = new JLabel();
        endPanel = new JPanel();
        thankLabel = new JLabel();
        jSeparator1 = new JSeparator();

        unregNotiLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        regDoneNotiLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        warningMesLabel.setFont(new java.awt.Font("Tahoma", 0, 11));
        confirmMesLabel.setFont(new java.awt.Font("Tahoma", 0, 11));
        getKeyLabel.setFont(new java.awt.Font("Tahoma", 0, 11));
        notiInputLabel.setFont(new java.awt.Font("Tahoma", 0, 11));
        enterKeyLabel.setFont(new java.awt.Font("Tahoma", 0, 11));
        RegNotiLabel.setFont(new java.awt.Font("Tahoma", 0, 11));

        headParentPanel.setLayout(new CardLayout());

        unregNotiLabel.setHorizontalAlignment(SwingConstants.CENTER);
        unregNotiLabel.setText("You are using UNREGISTERED version.");
        unregNotiLabel.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        GroupLayout unregNotiPanelLayout = new GroupLayout(unregNotiPanel);
        unregNotiPanel.setLayout(unregNotiPanelLayout);
        unregNotiPanelLayout.setHorizontalGroup(
                unregNotiPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(unregNotiLabel, GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
        );
        unregNotiPanelLayout.setVerticalGroup(
                unregNotiPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(unregNotiLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        headParentPanel.add(unregNotiPanel, "unregNotiCard");

        regDoneNotiLabel.setHorizontalAlignment(SwingConstants.CENTER);
        regDoneNotiLabel.setText("You are using REGISTERED version.");
        regDoneNotiLabel.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        GroupLayout regDoneNotiPanelLayout = new GroupLayout(regDoneNotiPanel);
        regDoneNotiPanel.setLayout(regDoneNotiPanelLayout);
        regDoneNotiPanelLayout.setHorizontalGroup(
                regDoneNotiPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(regDoneNotiLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        regDoneNotiPanelLayout.setVerticalGroup(
                regDoneNotiPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(regDoneNotiLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        headParentPanel.add(regDoneNotiPanel, "regDoneNotiCard");

        upParentPanel.setLayout(new CardLayout());

        warningMesLabel.setText("<html><b>Online features</b> and <b>Other utilities</b> have been disabled. Please register to use all of our features</html>");
        warningMesLabel.setHorizontalTextPosition(SwingConstants.CENTER);

        GroupLayout warningPanelLayout = new GroupLayout(warningPanel);
        warningPanel.setLayout(warningPanelLayout);
        warningPanelLayout.setHorizontalGroup(
                warningPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(warningPanelLayout.createSequentialGroup()
                                .addComponent(warningIconLabel, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(warningMesLabel, GroupLayout.PREFERRED_SIZE, 322, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        warningPanelLayout.setVerticalGroup(
                warningPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(warningIconLabel, GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                        .addComponent(warningMesLabel)
        );

        upParentPanel.add(warningPanel, "warningCard");

        confirmMesLabel.setText("You are registered.");

        GroupLayout confirmPanelLayout = new GroupLayout(confirmPanel);
        confirmPanel.setLayout(confirmPanelLayout);
        confirmPanelLayout.setHorizontalGroup(
                confirmPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(confirmPanelLayout.createSequentialGroup()
                                .addComponent(confirmIconLabel, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(confirmMesLabel, GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE))
        );
        confirmPanelLayout.setVerticalGroup(
                confirmPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(confirmPanelLayout.createSequentialGroup()
                                .addComponent(confirmIconLabel, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(confirmMesLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );


        upParentPanel.add(confirmPanel, "confirmCard");

        getKeyButton.setText("Get Key");

        showRegButton.setText("Enter Key");

        getKeyLabel.setText("Get your product key");

        enterKeyLabel.setText("I have a product key");

        GroupLayout centerPanelLayout = new GroupLayout(centerPanel);
        centerPanel.setLayout(centerPanelLayout);
        centerPanelLayout.setHorizontalGroup(
                centerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(centerPanelLayout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(centerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(getKeyButton, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(showRegButton, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(centerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(getKeyLabel, GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                                        .addComponent(enterKeyLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        centerPanelLayout.setVerticalGroup(
                centerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(centerPanelLayout.createSequentialGroup()
                                .addGroup(centerPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(getKeyLabel, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(getKeyButton, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(centerPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(enterKeyLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(showRegButton, GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)))
        );

        downParentPanel.setLayout(new CardLayout());

        GroupLayout nonPanelLayout = new GroupLayout(nonPanel);
        nonPanel.setLayout(nonPanelLayout);
        nonPanelLayout.setHorizontalGroup(
                nonPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 371, Short.MAX_VALUE)
        );
        nonPanelLayout.setVerticalGroup(
                nonPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 86, Short.MAX_VALUE)
        );

        downParentPanel.add(nonPanel, "nothingCard");

        regButton.setText("REGISTER");

        inputKeyArea.setColumns(15);
        inputKeyArea.setRows(3);
        inputKeyArea.setLineWrap(true);
        inputKeyArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(inputKeyArea);

        notiInputLabel.setText("Enter your product key here:");

        GroupLayout enterKeyPanelLayout = new GroupLayout(enterKeyPanel);
        enterKeyPanel.setLayout(enterKeyPanelLayout);
        enterKeyPanelLayout.setHorizontalGroup(
                enterKeyPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(enterKeyPanelLayout.createSequentialGroup()
                                .addGroup(enterKeyPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(enterKeyPanelLayout.createSequentialGroup()
                                                .addGap(33, 33, 33)
                                                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(30, 30, 30)
                                                .addComponent(regButton, GroupLayout.PREFERRED_SIZE, 102, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(enterKeyPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(notiInputLabel)))
                                .addContainerGap(40, Short.MAX_VALUE))
        );
        enterKeyPanelLayout.setVerticalGroup(
                enterKeyPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(enterKeyPanelLayout.createSequentialGroup()
                                .addComponent(notiInputLabel)
                                .addGroup(enterKeyPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(enterKeyPanelLayout.createSequentialGroup()
                                                .addGap(24, 24, 24)
                                                .addComponent(regButton, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(enterKeyPanelLayout.createSequentialGroup()
                                                .addGap(5, 5, 5)
                                                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        downParentPanel.add(enterKeyPanel, "enterKeyCard");

        RegNotiLabel.setText("<html>Name: <br>Product Key: </html>");
        RegNotiLabel.setBorder(BorderFactory.createTitledBorder(null, "This product is licensed to:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        GroupLayout regDonePanelLayout = new GroupLayout(regDonePanel);
        regDonePanel.setLayout(regDonePanelLayout);
        regDonePanelLayout.setHorizontalGroup(
                regDonePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(RegNotiLabel, GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
        );
        regDonePanelLayout.setVerticalGroup(
                regDonePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, regDonePanelLayout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RegNotiLabel, GroupLayout.PREFERRED_SIZE, 66, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        downParentPanel.add(regDonePanel, "regDoneCard");

        thankLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        thankLabel.setHorizontalAlignment(SwingConstants.CENTER);
        thankLabel.setText("Thank you. Hope our dictionary is helpful for you.");

        GroupLayout endPanelLayout = new GroupLayout(endPanel);
        endPanel.setLayout(endPanelLayout);
        endPanelLayout.setHorizontalGroup(
                endPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(thankLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        endPanelLayout.setVerticalGroup(
                endPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(thankLabel, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
        );

        GroupLayout mainPanelLayout = new GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(downParentPanel, GroupLayout.PREFERRED_SIZE, 371, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(centerPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(headParentPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(upParentPanel, GroupLayout.PREFERRED_SIZE, 371, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSeparator1)
                                        .addComponent(endPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(headParentPanel, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(upParentPanel, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(centerPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(downParentPanel, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 2, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(mainPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(mainPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        upCards = (CardLayout)upParentPanel.getLayout();
        downCards = (CardLayout)downParentPanel.getLayout();
        headCards = (CardLayout)headParentPanel.getLayout();

        regButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String inputText = inputKeyArea.getText();
                if(user.auth(inputText)){
                    user.setValidUser(true);
                    user.writeLisence();
                    RegNotiLabel.setText("<html>Name:" + user.getName() + "<br>Product Key:" + user.getProductKey() + "</html>");
                    downCards.show(downParentPanel, "regDoneCard");
                    upCards.show(upParentPanel, "confirmCard");
                    headCards.show(headParentPanel, "regDoneNotiCard");
                }
                else JOptionPane.showMessageDialog(RegisterBox.this, "Your key is invalid.");
            }
        });

        inputKeyArea.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {}

            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode() == KeyEvent.VK_ENTER){
                    String inputText = inputKeyArea.getText();
                    System.out.println(user.getName());
                    if(user.auth(inputText)){
                        user.setValidUser(true);
                        user.writeLisence();
                        RegNotiLabel.setText("<html>Name: " + user.getName() + "<br>Product Key: " + user.getProductKey() + "</html>");
                        downCards.show(downParentPanel, "regDoneCard");
                        upCards.show(upParentPanel, "confirmCard");
                        headCards.show(headParentPanel, "regDoneNotiCard");
                    }
                    else JOptionPane.showMessageDialog(null, "Your key is invalid.");
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {}
        });
        showRegButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(!user.isValidUser()){
                    downCards.show(downParentPanel, "enterKeyCard");
                }
                else downCards.show(downParentPanel, "regDoneCard");
            }
        });

        getKeyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(!user.isValidUser()) {
                    ShowRegBox box = new ShowRegBox(user);
                    box.setLocationRelativeTo(RegisterBox.this);
                    //box.pack();
                    box.setVisible(true);
                }
            }
        });

        pack();
    }// </editor-fold>

    // Variables declaration - do not modify
    private JLabel RegNotiLabel;
    private JPanel centerPanel;
    private JLabel confirmIconLabel;
    private JLabel confirmMesLabel;
    private JPanel confirmPanel;
    private JPanel downParentPanel;
    private JPanel endPanel;
    private JLabel enterKeyLabel;
    private JPanel enterKeyPanel;
    private JButton getKeyButton;
    private JLabel getKeyLabel;
    private JPanel headParentPanel;
    private JTextArea inputKeyArea;
    private JScrollPane jScrollPane2;
    private JSeparator jSeparator1;
    private JPanel mainPanel;
    private JPanel nonPanel;
    private JLabel notiInputLabel;
    private JLabel regDoneNotiLabel;
    private JPanel regDoneNotiPanel;
    private JPanel regDonePanel;
    private JButton showRegButton;
    private JLabel thankLabel;
    private JLabel unregNotiLabel;
    private JPanel unregNotiPanel;
    private JPanel upParentPanel;
    private JLabel warningIconLabel;
    private JLabel warningMesLabel;
    private JPanel warningPanel;
    private ImageIcon warningIcon;
    private ImageIcon confirmIcon;

    private CardLayout upCards;
    private CardLayout downCards;
    private CardLayout headCards;
    // End of variables declaration                   
}
